# -*- coding: utf-8 -*-
"""numberplateDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JjQ719wMIgZ0YsSOdPjnGotjNZLjakz
"""

!pip install -q kaggle

from google.colab.patches import cv2_imshow

from google.colab import files
files.upload()

from google.colab import find

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! kaggle datasets download -d andrewmvd/car-plate-detection

! unzip car-plate-detection.zip

import pandas as pd
import xml.etree.ElementTree as xet

from glob import glob

po=glob("/content/annotations/*.xml", recursive=False)
po



import os

labels_dict =dict(filePat=[],xmin=[],xmax=[],ymax=[],ymin=[])
for filename in po:
  info = xet.parse(filename)
  root = info.getroot()
  member_object = root.find('object')
  labels_info = member_object.find('bndbox')


  xmin=int(labels_info.find('xmin').text)
  xmax=int(labels_info.find('xmax').text)
  ymin=int(labels_info.find('ymin').text)
  ymax=int(labels_info.find('ymax').text)
  labels_dict['filePat'].append(filename)
  labels_dict['xmin'].append(xmin)
  labels_dict['xmax'].append(xmax)
  labels_dict['ymin'].append(ymin)
  labels_dict['ymax'].append(ymax)

import pandas

df = pd.DataFrame(labels_dict)
df

df.to_csv('labels.csv',index=False)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import cv2

df =pd.read_csv('labels.csv')
df.head()

import xml.etree.ElementTree as xet

filename = df['filePat'][0]
filename

def getFilename(filename):
 filename_image =xet.parse(filename).getroot().find('filename').text
 filepath_image = os.path.join('/content/images',filename_image)
 return filepath_image

getFilename(filename)

image_path = list(df['filePat'].apply(getFilename))
image_path

file_path= image_path[0]
file_path

import cv2

img = cv2.imread(file_path)



cv2_imshow(img)
cv2.waitKey(0)
cv2.destroyAllWindows()

from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import load_img, img_to_array

labels=df.iloc[:,1:].values

data=[]
output=[]
for ind in range(len(image_path)):
  image= image_path[ind]
  img_arr=cv2.imread(image)
  h,w,d =img_arr.shape

  load_image = load_img(image,target_size=(224,224))
  load_image_arr =img_to_array(load_image)
  norm_load_image_arr=load_image_arr/255.0

  xmin,xmax,ymin,ymax = labels[ind]
  nxmin,nxmax =xmin/w,xmax/w
  nymin,nymax =ymin/h,ymax/h
  label_norm = (nxmin,nxmax,nymin,nymax)

  data.append(norm_load_image_arr)
  output.append(label_norm)

label_norm

data

output

X=np.array(data,dtype=np.float32)
y=np.array(output,dtype=np.float32)

X.shape,y.shape

x_train,x_test,y_train,y_test =train_test_split(X,y,train_size=0.8,random_state=0)
x_train.shape,x_test.shape,y_train.shape,y_test.shape

from tensorflow.keras.applications import MobileNetV2,InceptionV3,InceptionResNetV2
from tensorflow.keras.layers import Dense,Dropout,Flatten,Input
from tensorflow.keras.models import Model
import tensorflow as tf

inception_resnet = InceptionResNetV2(weights="imagenet",include_top=False,input_tensor=Input(shape=(224,224,3)))

inception_resnet.trainable=False

headmodel = inception_resnet.output
headmodel = Flatten()(headmodel)
headmodel = Dense(10000,activation="relu")(headmodel)
headmodel = Dense(7000,activation="relu")(headmodel)
headmodel = Dense(4000,activation="relu")(headmodel)
headmodel = Dense(3000,activation="relu")(headmodel)
headmodel = Dense(2000,activation="relu")(headmodel)
headmodel = Dense(1000,activation="relu")(headmodel)
headmodel = Dense(750,activation="relu")(headmodel)
headmodel = Dense(500,activation="relu")(headmodel)
headmodel = Dense(250,activation="relu")(headmodel)
headmodel = Dense(4,activation="sigmoid")(headmodel)

model =Model(inputs=inception_resnet.input,outputs=headmodel)

model.compile(loss='mse',optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3))
model.summary()

from tensorflow.keras.callbacks import TensorBoard

tfb= TensorBoard('object_detection')

history = model.fit(x=x_train,y=y_train,batch_size=10,epochs=200,validation_data=(x_test,y_test),callbacks=[tfb])

model.save('/content/drive/MyDrive/model')

model.save('./')

import numpy as np
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf

from tensorflow.keras.preprocessing.image import load_img,img_to_array



model=tf.keras.models.load_model('/content/drive/MyDrive/model')
print('sucess')

path ='/content/images/Cars227.png'
image =load_img(path)
image = np.array(image,dtype=np.uint8)
image1= load_img(path,target_size=(224,224))
image_arr_224=img_to_array(image1)/255.0

h,w,d=image.shape
print('height of the image=',h)
print('width of the image=',w)

plt.figure(figsize=(10,8))
plt.imshow(image)
plt.show()

image_arr_224.shape

test_arr=image_arr_224.reshape(1,224,224,3)
test_arr.shape

cords=model.predict(test_arr)
cords

dnorm=np.array([w,w,h,h])
cords=cords*dnorm
cords

cords= cords.astype(np.int32)
cords

xmin,xmax,ymin,ymax=cords[0]
pt1= (xmin,ymin)
pt2=(xmax,ymax)
print(pt1,pt2)
cv2.rectangle(image,pt1,pt2,(0,255,0),3)

plt.figure(figsize=(10,8))
plt.imshow(image)
plt.show()

path ='/content/images/Cars227.png'


def object_detection(path):
    image =load_img(path)
    image = np.array(image,dtype=np.uint8)
    image1= load_img(path,target_size=(224,224))
    image_arr_224=img_to_array(image1)/255.0

    h,w,d=image.shape
    test_arr=image_arr_224.reshape(1,224,224,3)

    cords=model.predict(test_arr)

    dnorm=np.array([w,w,h,h])
    cords=cords*dnorm

    cords= cords.astype(np.int32)


    xmin,xmax,ymin,ymax=cords[0]
    pt1= (xmin,ymin)
    pt2=(xmax,ymax)
    print(pt1,pt2)
    cv2.rectangle(image,pt1,pt2,(0,255,0),3)

    return image,cords

path='/content/im1.jpg'
image,cods=object_detection(path)

plt.figure(figsize=(10,8))
plt.imshow(image)
plt.show()

cods[0]

xmin,xmax,ymin,ymax=cods[0]
xmin,xmax,ymin,ymax

from google.colab.patches import cv2_imshow

image.shape

import cv2

roi =image[ymax:ymin, xmin:xmax]
roi
cv2_imshow( roi)



cv2.waitKey(0)
cv2.destroyAllWindows()

pip install pytesseract

import pytesseract as pt



path='/content/images/Cars23.png'
image,cods=object_detection(path)

plt.figure(figsize=(10,8))
plt.imshow(image)
plt.show()

img = np.array(load_img(path))
img

img = np.array(load_img(path))
xmin,xmax,ymin,ymax=cods[0]
roi =img[ymin:ymax,xmin:xmax]
roi

from google.colab.patches import cv2_imshow

xmin,xmax,ymin,ymax=cods[0]
roi =image[ymax:ymin, xmin:xmax]
roi
cv2_imshow( roi)



cv2.waitKey(0)
cv2.destroyAllWindows()

pt.image_to_string(roi)

pip install easyocr

import easyocr
reader = easyocr.Reader(['ch_sim','en']) # this needs to run only once to load the model into memory
result = reader.readtext(roi)

reader = easyocr.Reader(['ch_sim','en']) # this needs to run only once to load the model into memory

